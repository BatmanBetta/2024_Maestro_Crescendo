package frc.robot.generated;

import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrainConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstantsFactory;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModule.ClosedLoopOutputType;
import com.ctre.phoenix6.mechanisms.swerve.SwerveModuleConstants.SteerFeedbackType;

import edu.wpi.first.math.util.Units;
import frc.robot.Constants;
import frc.robot.subsystems.CommandSwerveDrivetrain;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html
public class TunerConstants {
    // Both sets of gains need to be tuned to your individual robot.

    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    private static final Slot0Configs steerGains = new Slot0Configs()
        .withKP(15).withKI(0).withKD(0.2)
        .withKS(0).withKV(1.5).withKA(0);
    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    private static final Slot0Configs driveGains = new Slot0Configs()
        .withKP(1).withKI(0).withKD(0)
        .withKS(0).withKV(0).withKA(0);

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    private static final ClosedLoopOutputType steerClosedLoopOutput = ClosedLoopOutputType.Voltage;
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    private static final ClosedLoopOutputType driveClosedLoopOutput = ClosedLoopOutputType.Voltage;

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    private static final double kSlipCurrentA = Constants.Drive.SLIP_CURRENT;

    // Theoretical free speed (m/s) at 12v applied output;
    // This needs to be tuned to your individual robot
    public static final double kSpeedAt12VoltsMps = Constants.Drive.SPEED_AT_12_VOLTS;

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    private static final double kCoupleRatio = Constants.Drive.COUPLE_RATIO;

    private static final double kDriveGearRatio = Constants.Drive.DRIVE_GEAR_RATIO;
    private static final double kSteerGearRatio = Constants.Drive.STEER_GEAR_RATIO;
    public static final double kWheelRadiusInches = Constants.Drive.WHEEL_RADIUS;

    private static final boolean kSteerMotorReversed = false;
    private static final boolean kInvertLeftSide = false;
    private static final boolean kInvertRightSide = true;

    private static final String kCANbusName = "Drive Motors";
    private static final int kPigeonId = Constants.Ports.Drive_Ports.PIGEON_ID;

    private static final SwerveDrivetrainConstants DrivetrainConstants = new SwerveDrivetrainConstants()
            .withPigeon2Id(kPigeonId)
            .withCANbusName(kCANbusName);

    private static final SwerveModuleConstantsFactory ConstantCreator = new SwerveModuleConstantsFactory()
            .withDriveMotorGearRatio(kDriveGearRatio)
            .withSteerMotorGearRatio(kSteerGearRatio)
            .withWheelRadius(kWheelRadiusInches)
            .withSlipCurrent(kSlipCurrentA)
            .withSteerMotorGains(steerGains)
            .withDriveMotorGains(driveGains)
            .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
            .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
            .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
            .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
            .withCouplingGearRatio(kCoupleRatio)
            .withSteerMotorInverted(kSteerMotorReversed);


    // Front Left
    private static final int kFrontLeftDriveMotorId = Constants.Ports.Drive_Ports.FL_DRIVE_MOTOR_ID;
    private static final int kFrontLeftSteerMotorId = Constants.Ports.Drive_Ports.FL_STEER_MOTOR_ID;
    private static final int kFrontLeftEncoderId = Constants.Ports.Drive_Ports.FL_ENCODER_ID;
    private static final double kFrontLeftEncoderOffset = Constants.Drive.FL_ENCODER_OFFSET; 

    private static final double kFrontLeftXPosInches = Constants.Drive.TRACK / 2;
    private static final double kFrontLeftYPosInches = Constants.Drive.TRACK / 2;

    // Front Right
    private static final int kFrontRightDriveMotorId = Constants.Ports.Drive_Ports.FR_DRIVE_MOTOR_ID;
    private static final int kFrontRightSteerMotorId = Constants.Ports.Drive_Ports.FR_STEER_MOTOR_ID;
    private static final int kFrontRightEncoderId =  Constants.Ports.Drive_Ports.FR_ENCODER_ID;
    private static final double kFrontRightEncoderOffset = Constants.Drive.FR_ENCODER_OFFSET; 

    private static final double kFrontRightXPosInches = Constants.Drive.TRACK / 2;
    private static final double kFrontRightYPosInches = Constants.Drive.TRACK / -2;

    // Back Left
    private static final int kBackLeftDriveMotorId = Constants.Ports.Drive_Ports.BL_DRIVE_MOTOR_ID;
    private static final int kBackLeftSteerMotorId = Constants.Ports.Drive_Ports.BL_STEER_MOTOR_ID;
    private static final int kBackLeftEncoderId = Constants.Ports.Drive_Ports.BL_ENCODER_ID;
    private static final double kBackLeftEncoderOffset = Constants.Drive.BL_ENCODER_OFFSET;

    private static final double kBackLeftXPosInches = Constants.Drive.TRACK / -2;
    private static final double kBackLeftYPosInches = Constants.Drive.TRACK / 2;

    // Back Right
    private static final int kBackRightDriveMotorId = Constants.Ports.Drive_Ports.BR_DRIVE_MOTOR_ID;
    private static final int kBackRightSteerMotorId =  Constants.Ports.Drive_Ports.BR_STEER_MOTOR_ID;
    private static final int kBackRightEncoderId = Constants.Ports.Drive_Ports.BR_ENCODER_ID;
    private static final double kBackRightEncoderOffset = Constants.Drive.BR_ENCODER_OFFSET; 

    private static final double kBackRightXPosInches = Constants.Drive.TRACK / -2;
    private static final double kBackRightYPosInches = Constants.Drive.TRACK / -2;


    private static final SwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId, kFrontLeftDriveMotorId, kFrontLeftEncoderId, kFrontLeftEncoderOffset, Units.inchesToMeters(kFrontLeftXPosInches), Units.inchesToMeters(kFrontLeftYPosInches), kInvertLeftSide);
    private static final SwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId, kFrontRightDriveMotorId, kFrontRightEncoderId, kFrontRightEncoderOffset, Units.inchesToMeters(kFrontRightXPosInches), Units.inchesToMeters(kFrontRightYPosInches), false);
    private static final SwerveModuleConstants BackLeft = ConstantCreator.createModuleConstants(
            kBackLeftSteerMotorId, kBackLeftDriveMotorId, kBackLeftEncoderId, kBackLeftEncoderOffset, Units.inchesToMeters(kBackLeftXPosInches), Units.inchesToMeters(kBackLeftYPosInches), kInvertLeftSide);
    private static final SwerveModuleConstants BackRight = ConstantCreator.createModuleConstants(
            kBackRightSteerMotorId, kBackRightDriveMotorId, kBackRightEncoderId, kBackRightEncoderOffset, Units.inchesToMeters(kBackRightXPosInches), Units.inchesToMeters(kBackRightYPosInches), kInvertRightSide);

    public static final CommandSwerveDrivetrain DriveTrain = new CommandSwerveDrivetrain(DrivetrainConstants, FrontLeft,
            FrontRight, BackLeft, BackRight);
}
